#!/usr/bin/env bash

################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

################################################################################

APP="MkCryptPasswd"
VER="1.9.3"
DESC="Utility for hashing passwords"

################################################################################

NORM=0
BOLD=1
ITLC=3
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

# shellcheck disable=SC2034
CL_NORM="\e[${NORM}m"
# shellcheck disable=SC2034
CL_BOLD="\e[${BOLD}m"
# shellcheck disable=SC2034
CL_ITLC="\e[${ITLC}m"
# shellcheck disable=SC2034
CL_UNLN="\e[${UNLN}m"
# shellcheck disable=SC2034
CL_RED="\e[${RED}m"
# shellcheck disable=SC2034
CL_GREEN="\e[${GREEN}m"
# shellcheck disable=SC2034
CL_YELLOW="\e[${YELLOW}m"
# shellcheck disable=SC2034
CL_BLUE="\e[${BLUE}m"
# shellcheck disable=SC2034
CL_MAG="\e[${MAG}m"
# shellcheck disable=SC2034
CL_CYAN="\e[${CYAN}m"
# shellcheck disable=SC2034
CL_GREY="\e[${GREY}m"
# shellcheck disable=SC2034
CL_DARK="\e[${DARK}m"
# shellcheck disable=SC2034
CL_BL_RED="\e[${BOLD};${RED}m"
# shellcheck disable=SC2034
CL_BL_GREEN="\e[${BOLD};${GREEN}m"
# shellcheck disable=SC2034
CL_BL_YELLOW="\e[${BOLD};${YELLOW}m"
# shellcheck disable=SC2034
CL_BL_BLUE="\e[${BOLD};${BLUE}m"
# shellcheck disable=SC2034
CL_BL_MAG="\e[${BOLD};${MAG}m"
# shellcheck disable=SC2034
CL_BL_CYAN="\e[${BOLD};${CYAN}m"
# shellcheck disable=SC2034
CL_BL_GREY="\e[${BOLD};${GREY}m"
# shellcheck disable=SC2034
CL_IT_DARK="\e[${ITLC};${DARK}m"

################################################################################

SALT_TEMP="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

MIN_SALT_LENGTH=4
MAX_SALT_LENGTH=32

SUPPORTED_OPTS="!version !help !stdin !strong !secure 
 !MD5 !SHA256 !SHA512 salt salt_length !no_color"

SHORT_OPTS="v:!version h:!help sa:salt sl:salt_length 
 s:!secure S:!strong 1:!MD5 5:!SHA256 6:!SHA512 nc:!no_color"

method=6
salt_length=8

################################################################################

# Main function
#
# *: Script arguments
#
# Code: No
# Echo: No
main() {
  if [[ -n "$no_color" || -n "$NO_COLOR" ]] || [[ ! -c /dev/stdout && -z $FAKETTY ]] ; then
    unset NORM BOLD CL_ITLC UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_IT_DARK
    no_color=true
  fi

  if [[ -n "$help" ]] ; then
    usage
    exit 0
  fi

  if [[ -n "$version" ]] ; then
    about
    exit 0
  fi

  prepare "$@"
  calculate "$@"

  exit 0
}

# Prepare for script execution
#
# *: Script arguments
#
# Code: No
# Echo: No
prepare() {
  if ! hasApp "python" ; then
    if ! hasApp "python3" ; then
      error "Error! For using this utility, you must install python first."
      exit 1
    fi
  fi

  if ! hasApp "mktemp" "cracklib-check" ; then
    error "Error! For using this utility, you must install cracklib-check and mktemp first."
    exit 1
  fi

  if [[ $salt_length -le $MIN_SALT_LENGTH ]] ; then
    salt_length=$MIN_SALT_LENGTH
  fi

  if [[ $salt_length -ge $MAX_SALT_LENGTH ]] ; then
    salt_length=$MAX_SALT_LENGTH
  fi

  if [[ "$*" == "--" ]] ; then
    stdin=true
  fi
}

# Calculate password hash
#
# Code: No
# Echo: No
calculate() {
  local password now pass_hash error_num

  if [[ -z "$salt" ]] ; then
    salt=$(mktemp -u "${SALT_TEMP:0:$salt_length}")
  fi

  if [[ -n "$stdin" ]] ; then
    password=$(cat /dev/stdin)

    if [[ -z "$password" ]] ; then
      error "Password can not be empty!"
      exit 1
    fi

    if ! isGoodPassword "$password" ; then
      exit 1
    fi
  else
    while : ; do
      if [[ $error_num -eq 3 ]] ; then
        exit 1
      fi

      show "Please enter the password:" $CYAN

      if [[ -n "$secure" ]] ; then
        read -s -r -p "> " password
        show ""
      else
        now=$(date +%s)

        read -r -p "> " password

        # If stdin is present, we read it immediately
        # In this case we need additional line
        [[ "$now" == $(date +%s) ]] && show ""

        maskPassword ${#password}
      fi

      if [[ -z "$password" ]] ; then
        show ""
        show "Password can't be empty!" $YELLOW
        show ""
        (( error_num++ ))
        continue
      fi

      if isGoodPassword "$password" ; then
        break
      else
        (( error_num++ ))
      fi
    done
  fi

  if [[ -n "$MD5" ]] ; then
    method=1
  elif [[ -n "$SHA256" ]]; then
    method=5
  fi

  if hasApp "python3" ; then
    pass_hash=$(python3 -c "import crypt; print(crypt.crypt('${password}', '\$${method}\$${salt}\$'))")
  else
    pass_hash=$(python -c "import crypt; print crypt.crypt('${password}', '\$${method}\$${salt}\$')")
  fi

  if [[ -n "$stdin" ]] ; then
    show "$pass_hash"
  else
    show "\n${CL_BOLD}Hash:${CL_NORM} $pass_hash"
  fi
}

# Check if password is good
#
# 1: Password (String)
#
# Code: Yes
# Echo: No
isGoodPassword() {
  [[ -z "$strong" ]] && return 0

  local password_info
  
  password_info=$(getPasswordInfo "$1")

  if [[ "$password_info" != "OK" ]] ; then
    if [[ -z "$stdin" ]] ; then
      show "\nPassword is too weak: $password_info\n" $YELLOW
    fi

    return 1
  fi

  return 0
}

# Get info about password from cracklib check
#
# 1: Password (String)
#
# Code: No
# Echo: Info (String)
getPasswordInfo() {
  echo "$1" | cracklib-check | sed 's/: /:/g' | cut -f2 -d":"
}

# Check if given app is installed
#
# 1: Binary name (String)
#
# Code: Yes
# Echo: No
hasApp() {
  if ! type -P "$1" &> /dev/null ; then
    return 1
  fi

  return 0
}

# Mask password
#
# 1: Password length (Number)
#
# Code: No
# Echo: No
maskPassword() {
  local i result

  result="${result}> "

  # shellcheck disable=SC2034
  for i in $(seq 1 "$1") ; do
    result="${result}*"
  done

  printf "\e[1A%s\n" "$result"
}

################################################################################

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  [[ -n "$silent" ]] && return

  if [[ -n "$2" && -z "$no_color" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print error message
#
# 1: Message (String)
#
# Code: No
# Echo: No
error() {
  show "$*" $RED 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} mkcryptpasswd ${CL_GREEN}{option}${CL_NORM}"
  show ""
  show "Options" $BOLD
  show ""
  if [[ -n "$DARK" ]] ; then
    show "  ${CL_GREEN}--MD5, -1${CL_NORM} ${CL_DARK}...........${CL_NORM} Generate password hash by MD5 algorithm"
    show "  ${CL_GREEN}--SHA256, -5${CL_NORM} ${CL_DARK}........${CL_NORM} Generate password hash by SHA algorithm with 256 bits digests"
    show "  ${CL_GREEN}--SHA512, -6${CL_NORM} ${CL_DARK}........${CL_NORM} Generate password hash by SHA algorithm with 512 bits digests ${CL_DARK}(default)${CL_NORM}"
    show "  ${CL_GREEN}--stdin, --${CL_NORM} ${CL_DARK}.........${CL_NORM} Read password from stdin"
    show "  ${CL_GREEN}--strong, -S${CL_NORM} ${CL_DARK}........${CL_NORM} Return error if password is too weak"
    show "  ${CL_GREEN}--secure, -s${CL_NORM} ${CL_DARK}........${CL_NORM} Do not echo password"
    show "  ${CL_GREEN}--salt, -sa${CL_NORM} ${CL_DARK}.........${CL_NORM} Salt"
    show "  ${CL_GREEN}--salt-length, -sl${CL_NORM} ${CL_DARK}..${CL_NORM} Generated salt length ${CL_DARK}(4-16, 8 by default)${CL_NORM}"
    show "  ${CL_GREEN}--no-color, -nc${CL_NORM} ${CL_DARK}.....${CL_NORM} Disable colors in output"
    show "  ${CL_GREEN}--version, -v${CL_NORM} ${CL_DARK}.......${CL_NORM} Show information about version"
    show "  ${CL_GREEN}--help, -h${CL_NORM} ${CL_DARK}..........${CL_NORM} Show this help message"
  else
    show "  ${CL_GREEN}--MD5, -1${CL_NORM}             Generate password hash by MD5 algorithm"
    show "  ${CL_GREEN}--SHA256, -5${CL_NORM}          Generate password hash by SHA algorithm with 256 bits digests"
    show "  ${CL_GREEN}--SHA512, -6${CL_NORM}          Generate password hash by SHA algorithm with 512 bits digests (default)"
    show "  ${CL_GREEN}--stdin, --${CL_NORM}           Read password from stdin"
    show "  ${CL_GREEN}--strong, -S${CL_NORM}          Return error if password is too weak"
    show "  ${CL_GREEN}--secure, -s${CL_NORM}          Do not echo password"
    show "  ${CL_GREEN}--salt, -sa${CL_NORM}           Salt"
    show "  ${CL_GREEN}--salt-length, -sl${CL_NORM}    Generated salt length (4-16, 8 by default)"
    show "  ${CL_GREEN}--no-color, -nc${CL_NORM}       Disable colors in output"
    show "  ${CL_GREEN}--version, -v${CL_NORM}         Show information about version"
    show "  ${CL_GREEN}--help, -h${CL_NORM}            Show this help message"
  fi
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - $DESC"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Error! You have used unsupported argument $1. Please check command syntax."
  exit 1
}

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift

done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
